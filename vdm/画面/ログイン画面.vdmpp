class ログイン画面 is subclass of 画面
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
public IDフィールド : token := mk_token("NULL");
public パスワードフィールド : token := mk_token("NULL");

operations

-- <UI部品名>を<アクション>する

-- IDフィールドがpublicにならば、不要では無いのか？
public IDを入力する : token ==> ()
IDを入力する(id) ==
	(
		temp := io.echo("ログイン画面.IDを入力する\n");
		IDフィールド := id;
	);

-- パスワードフィールドがpublicにならば、不要では無いのか？
public パスワードを入力する : token ==> ()
パスワードを入力する(pass) == 
	(
		temp := io.echo("ログイン画面.パスワードを入力する\n");
		パスワードフィールド := pass;
	);

public ログインボタンを押下する : () ==> 画面
ログインボタンを押下する() ==
	(
		temp := io.echo("ログイン画面.ログインボタンを押下する\n");
		let
			sys = システム`システムインスタンス,
			認証情報確認結果 = sys.認証情報を確認する(IDフィールド, パスワードフィールド) -- なぜ、opereationは呼べないのか？ pure 呼べるようになる。
		in
			if 認証情報確認結果 = true
			then
				(
					temp := io.echo("ログイン画面.タスク一覧画面に遷移する\n");
					return new タスク一覧画面();
				)
			else return self
	)
post
	let
		sys = システム`システムインスタンス,
		認証情報確認結果 = sys.認証情報を確認する(IDフィールド, パスワードフィールド) -- なぜ、opereationは呼べないのか？ pure 呼べるようになる。
	in
		-- IDとパスワードが正しければ、タスク一覧画面に遷移する
		(認証情報確認結果 = true and isofclass(タスク一覧画面, RESULT))
		or
		-- IDとパスワードが正しくなければ、画面遷移しない
		(認証情報確認結果 = false and RESULT = self);		
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end ログイン画面