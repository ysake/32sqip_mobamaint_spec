class ユーザ
types

public ID型 = token;
public パスワード型 = token;
public タスク名型 = token;

values

instance variables
public 現画面 : 画面 := new ホーム画面();
public 現顧客名 : token := mk_token("NULL");
public 現顧客住所 : token := mk_token("NULL");
public 現その他情報 : token := mk_token("NULL");
public 現現象情報 : token := mk_token("NULL");
public 現原因情報 : token := mk_token("NULL");
public 現対策情報 : token := mk_token("NULL");
public 現交換部品集合 : set of 交換部品登録画面`部品フィールド型 := {};

operations

public 起動する : () ==> ()
起動する() ==
	現画面 := narrow_(現画面, ホーム画面).アイコンを押下する()
pre isofclass(ホーム画面, 現画面)
post isofclass(ログイン画面, 現画面);

public ログインする : ID型 * パスワード型 ==> ()
ログインする(id, パスワード) ==
--let s = narrow_(現画面, ログイン画面)
--in (
	(
		dcl s : ログイン画面 := narrow_(現画面, ログイン画面); -- 変更するつもりがないのに、変数として定義しているのが気持ち悪い。仕様記述ではあまり使われない。アルゴリズム仕様で使うことがあるかも。
	  --なぜダメなのか？　定数を代入文の左に置くことはできない。左に置くことができるのは、変数のみ。
		s.IDフィールド := id;
		s.パスワードフィールド := パスワード;
		--s.IDを入力する(id);
		--s.パスワードを入力する(パスワード);
		現画面 := s.ログインボタンを押下する();
	)
pre isofclass(ログイン画面, 現画面)
post isofclass(タスク一覧画面, 現画面)
     or 
     isofclass(ログイン画面, 現画面);

public タスクを選択する : タスク名型 ==>  ()
タスクを選択する(タスク名) == is not yet specified
pre isofclass(タスク一覧画面, 現画面)
post
	-- タスク一覧画面にタスク名が含まれていたので、メンテナンス作業画面に遷移した
	(タスク一覧画面にタスク名が含まれている(現画面~, タスク名) and
		isofclass(メンテナンス作業画面, 現画面))
	or
	-- タスク一覧画面にタスク名が含まれていなかったので、画面遷移しなかった
	(not タスク一覧画面にタスク名が含まれている(現画面~, タスク名) and
		現画面 = 現画面~);

public タスク情報を取得する : () ==> ()
タスク情報を取得する() == 
	(
		現画面 := narrow_(現画面, メンテナンス作業画面).タスク情報ボタンを押下する();
		現顧客名 := narrow_(現画面, タスク情報画面).顧客名フィールド;
		現顧客住所 := narrow_(現画面, タスク情報画面).住所フィールド;
		現その他情報 := narrow_(現画面, タスク情報画面).その他フィールド;
		現画面 := narrow_(現画面, タスク情報画面).戻るボタンを押下する();
	)
pre isofclass(メンテナンス作業画面, 現画面)
post 現画面 = 現画面~;

public 作業内容を登録する : token ==> ()
作業内容を登録する(work) ==
	(
		現画面 := narrow_(現画面, メンテナンス作業画面).作業内容登録ボタンを押下する();
	  let s = narrow_(現画面, 作業内容登録画面) in s.現象を入力する(work);
	  let s = narrow_(現画面, 作業内容登録画面) in s.原因を入力する(work);
	  let s = narrow_(現画面, 作業内容登録画面) in s.対策を入力する(work);
		現画面 := narrow_(現画面, 作業内容登録画面).戻るボタンを押下する();		
	)
pre isofclass(メンテナンス作業画面, 現画面)
post 現画面 = 現画面~;

public 作業内容を取得する : () ==> ()
作業内容を取得する() ==
	(
		現画面 　　:= narrow_(現画面, メンテナンス作業画面).作業内容登録ボタンを押下する();
	  現現象情報 := narrow_(現画面, 作業内容登録画面).現象フィールド;
	  現原因情報 := narrow_(現画面, 作業内容登録画面).原因フィールド;
	  現対策情報 := narrow_(現画面, 作業内容登録画面).対策フィールド;
		現画面 　　:= narrow_(現画面, 作業内容登録画面).戻るボタンを押下する();		
	)
pre isofclass(メンテナンス作業画面, 現画面)
post 現画面 = 現画面~;

public 交換部品を登録する : token * token ==> ()
交換部品を登録する(型番, 名称) ==
	(
		現画面 := narrow_(現画面, メンテナンス作業画面).交換部品登録ボタンを押下する();
		let s = narrow_(現画面, 交換部品登録画面)
		in s.交換部品を追加する(mk_交換部品登録画面`部品フィールド型(型番, 名称));
		現画面 := narrow_(現画面, 交換部品登録画面).戻るボタンを押下する();
	)
pre isofclass(メンテナンス作業画面, 現画面)
post 現画面 = 現画面~;

public 交換部品を取得する : () ==> ()
交換部品を取得する() ==
	(
		現画面 := narrow_(現画面, メンテナンス作業画面).交換部品登録ボタンを押下する();
		現交換部品集合 := narrow_(現画面, 交換部品登録画面).部品フィールド集合;
		現画面 := narrow_(現画面, 交換部品登録画面).戻るボタンを押下する();
	)
pre isofclass(メンテナンス作業画面, 現画面)
post 現画面 = 現画面~;

public 作業結果を送信する : () ==> ()
作業結果を送信する() == is not yet specified
pre isofclass(メンテナンス作業画面, 現画面)
post isofclass(タスク一覧画面, 現画面);

functions

public タスク一覧画面にタスク名が含まれている : タスク一覧画面 * タスク名型 -> bool
タスク一覧画面にタスク名が含まれている(taskListScreen, taskName) == 
	taskName in set taskListScreen.タスク一覧テーブル;

traces
-- TODO Define Combinatorial Test Traces here
end ユーザ